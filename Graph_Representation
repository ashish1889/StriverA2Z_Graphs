//https://takeuforward.org/graph/graph-representation-in-c/

//Below code is for undirected weighted graph, using pair with target vertex and weight

#include <iostream>
#include<vector>
using namespace std;

int main()
{
   // std::cout<<"Hello World";
   
   int n, m;
    cin >> n >> m;
    vector<pair<int,int>> adj[n+1];
    for(int i = 0; i < m; i++)
    {
        int u, v, wt;
        // u â€”> v
        cin >> u >> v >> wt;
        adj[u].push_back(make_pair(v,wt));
        adj[v].push_back(make_pair(u,wt));
        
    }
    
    for(int i = 0; i < m; i++)
    {
        if(i>0)
        cout<<"from node: "<<i<<"to->(node,weight) ";
        for(int j = 0;j<adj[i].size();j++){
            cout<<adj[i][j].first<<"->"<<adj[i][j].second<<" ";
        }
        
        cout<<"\n";
    }

    return 0;
}

i/p given-

5 6
1 2 3
1 3 2
2 4 4
3 4 1
3 5 6
4 5 3

o/p-
from node: 1to->(node,weight) 2->3 3->2 
from node: 2to->(node,weight) 1->3 4->4 
from node: 3to->(node,weight) 1->2 4->1 5->6 
from node: 4to->(node,weight) 2->4 3->1 5->3 
from node: 5to->(node,weight) 3->6 4->3 

=================================================================================================================


#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

// Class representing a graph
class Graph {
private:
    // Adjacency list
    unordered_map<int, vector<int>> adjList;

public:
    // Add an edge to the graph
    void addEdge(int u, int v, bool isDirected = false) {
        adjList[u].push_back(v); // Add v to u's list
        if (!isDirected) {
            adjList[v].push_back(u); // Add u to v's list for undirected graph
        }
    }

    // Print the adjacency list
    void printGraph() const {
        for (const auto& pair : adjList) {
            cout << pair.first << " -> ";
            for (int vertex : pair.second) {
                cout << vertex << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Graph g;

    // Add edges
    g.addEdge(0, 1);
    g.addEdge(0, 4);
    g.addEdge(1, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // Print the graph
    cout << "Graph representation (Adjacency List):" << endl;
    g.printGraph();

    return 0;
}


Explanation:
Graph Class:
adjList is a unordered_map where each key is a node, and the value is a vector of adjacent nodes.
addEdge adds edges between two nodes. The isDirected parameter determines if the graph is directed or undirected (default is undirected).
printGraph displays the adjacency list.
Main Function:
Creates a graph object.
Adds edges using the addEdge method.
Prints the graph's adjacency list representation.

Graph representation (Adjacency List):
0 -> 1 4 
1 -> 0 2 3 4 
2 -> 1 3 
3 -> 1 2 4 
4 -> 0 1 3 

This example allows flexibility for directed and undirected graphs and demonstrates the adjacency list's compact representation.
